* using log directory ‘/mnt/tmp/RtmpBbPyWP/check_cran6f221b80e252/BatchExperiments.Rcheck’
* using R version 3.1.1 (2014-07-10)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* using option ‘--no-codoc’
* checking for file ‘BatchExperiments/DESCRIPTION’ ... OK
* this is package ‘BatchExperiments’ version ‘1.2’
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘BatchExperiments’ can be installed ... OK
* checking installed package size ... OK
* checking package directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... NOTE
Unexported objects imported by ':::' calls:
  ‘BatchJobs:::addIntModulo’ ‘BatchJobs:::buffer’
  ‘BatchJobs:::checkDir’ ‘BatchJobs:::checkIdValid’
  ‘BatchJobs:::checkIds’ ‘BatchJobs:::checkPart’
  ‘BatchJobs:::createShardedDirs’ ‘BatchJobs:::dbConnectToJobsDB’
  ‘BatchJobs:::dbCreateJobStatusTable’ ‘BatchJobs:::dbDoQuery’
  ‘BatchJobs:::dbFindDone’ ‘BatchJobs:::dbFindRunning’
  ‘BatchJobs:::dbGetErrorMsgs’ ‘BatchJobs:::dbRemoveJobs’
  ‘BatchJobs:::dbSelectWithIds’ ‘BatchJobs:::getJobDirs’
  ‘BatchJobs:::getJobInfoInternal’ ‘BatchJobs:::getKillJob’
  ‘BatchJobs:::getListJobs’ ‘BatchJobs:::getRandomSeed’
  ‘BatchJobs:::getResult’ ‘BatchJobs:::isRegistryDir’
  ‘BatchJobs:::list2df’ ‘BatchJobs:::makeRegistryInternal’
  ‘BatchJobs:::saveRegistry’ ‘BatchJobs:::seeder’
  ‘BatchJobs:::syncRegistry’
  See the note in ?`:::` about the use of this operator.
See the information on DESCRIPTION files in the chapter ‘Creating R
packages’ of the ‘Writing R Extensions’ manual.
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd line widths ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... SKIPPED
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking examples ... ERROR
Running examples in ‘BatchExperiments-Ex.R’ failed
The error most likely occurred in:

> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addExperiments
> ### Title: Add experiemts to the registry.
> ### Aliases: Experiment addExperiments
> 
> ### ** Examples
> 
> ### EXAMPLE 1 ###
> reg = makeExperimentRegistry(id = "example1", file.dir = tempfile())
Creating dir: /tmp/RtmpMDoG8J/file10764dbd2dc7
Saving registry: /tmp/RtmpMDoG8J/file10764dbd2dc7/registry.RData
> 
> # Define a problem:
> # Subsampling from the iris dataset.
> data(iris)
> subsample = function(static, ratio) {
+   n = nrow(static)
+   train = sample(n, floor(n * ratio))
+   test = setdiff(seq(n), train)
+   list(test = test, train = train)
+ }
> addProblem(reg, id = "iris", static = iris,
+            dynamic = subsample, seed = 123)
Writing problem files: /tmp/RtmpMDoG8J/file10764dbd2dc7/problems/iris_static.RData, /tmp/RtmpMDoG8J/file10764dbd2dc7/problems/iris_dynamic.RData
> 
> # Define algorithm "tree":
> # Decision tree on the iris dataset, modeling Species.
> tree.wrapper = function(static, dynamic, ...) {
+   library(rpart)
+   mod = rpart(Species ~ ., data = static[dynamic$train, ], ...)
+   pred = predict(mod, newdata = static[dynamic$test, ], type = "class")
+   table(static$Species[dynamic$test], pred)
+ }
> addAlgorithm(reg, id = "tree", fun = tree.wrapper)
Writing algorithm file: /tmp/RtmpMDoG8J/file10764dbd2dc7/algorithms/tree.RData
> 
> # Define algorithm "forest":
> # Random forest on the iris dataset, modeling Species.
> forest.wrapper = function(static, dynamic, ...) {
+   library(randomForest)
+   mod = randomForest(Species ~ ., data = static, subset = dynamic$train, ...)
+   pred = predict(mod, newdata = static[dynamic$test, ])
+   table(static$Species[dynamic$test], pred)
+ }
> addAlgorithm(reg, id = "forest", fun = forest.wrapper)
Writing algorithm file: /tmp/RtmpMDoG8J/file10764dbd2dc7/algorithms/forest.RData
> 
> # Define problem parameters:
> pars = list(ratio = c(0.67, 0.9))
> iris.design = makeDesign("iris", exhaustive = pars)
> 
> # Define decision tree parameters:
> pars = list(minsplit = c(10, 20), cp = c(0.01, 0.1))
> tree.design = makeDesign("tree", exhaustive = pars)
> 
> # Define random forest parameters:
> pars = list(ntree = c(100, 500))
> forest.design = makeDesign("forest", exhaustive = pars)
> 
> # Add experiments to the registry:
> # Use  previously defined experimental designs.
> addExperiments(reg, prob.designs = iris.design,
+                algo.designs = list(tree.design, forest.design),
+                repls = 2) # usually you would set repls to 100 or more.
Adding 12 experiments / 24 jobs to DB.
Warning: 'dbBeginTransaction' is deprecated.
Use 'dbBegin' instead.
See help("Deprecated")
Error in (function (classes, fdef, mtable)  : 
  unable to find an inherited method for function ‘dbBegin’ for signature ‘"missing"’
Calls: addExperiments ... dbBeginTransaction -> dbBegin -> .valueClassTest -> is -> <Anonymous>
Execution halted
